<% include ../partials/attendanceHeader%>
<div class="container">
  <h3>View Dosen Tidak Tetap Payroll</h3>
  <div id="validation-alert" class="alert alert-danger" style="display: none; text-align: center;" role="alert"></div>
  <table class="table">
    <label class="pl-3">From:</label>
    <div class="md-form col-xl-3">
      <input name="from" type="date" id="from_txt" required>
    </div>
    <label class="pl-3">To:</label>
    <div class="md-form col-xl-3">
      <input name="to" type="date" id="to_txt" required>
    </div>
    <button id="generate_button" type="button" class="btn btn-primary">Generate</button>
    <br>
    <div class="preloader-wrapper big active" id="spinner" style="display: none;top: 50%; left: 50%;">
      <div class="spinner-layer spinner-blue-only">
        <div class="circle-clipper left">
          <div class="circle"></div>
        </div>
        <div class="gap-patch">
          <div class="circle"></div>
        </div>
        <div class="circle-clipper right">
          <div class="circle"></div>
        </div>
      </div>
    </div>

    <table id="data_table" class="table stripe" cellspacing="0" width="100%">
      <thead>
        <tr>
          <td>Kategori Kepegawaian</td>
          <td>Nomor Induk Karyawan (NIK)</td>
          <td>Nama Depan</td>
          <td>Nama Tengah</td>
          <td>Nama Belakang/Marga</td>
          <td>Departemen/Fakultas</td>
          <td>Spesialisasi</td>
          <td>Cost Center</td>
          <td>Nama Mata Kuliah</td>
          <td>Jumlah Sesi Tutorial</td>
          <td>Jumlah Sesi Lecture</td>
          <td>Total Sesi</td>
          <td>Perhitungan Gaji</td>
          <td>Jenis Mata Uang</td>
          <td>Jumlah Gaji Saat Ini</td>
          <td>Penerimaan Gaji</td>
          <td>Total Durasi Jam Kerja</td>
          <td>Gaji Pokok/Total Gaji per Jam</td>
          <td>Penambahan/Pengurangan</td>
          <td>Keterangan Penambahan/Pengurangan</td>
          <td>Total Gaji Yang Diterima</td>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </table>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Pengeditan Gaji</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div id="modal_keterangan_title" class="alert alert-primary" role="alert"></div>
        <!-- Material form group -->
        <!--Blue select-->
        <form id="form_keterangan">
          <select class="mdb-select colorful-select dropdown-primary" id="option_keterangan">
            <option value="1">Penambahan</option>
            <option value="2">Pengurangan</option>
          </select>
          <!--/Blue select-->
          <div class="md-form form-group mt-5">
            <input type="number" class="form-control" id="nominal_txt" placeholder="" required>
            <label for="formGroupExampleInputMD">Jumlah</label>
          </div>
          <!-- Material input -->
          <div class="md-form form-group mt-5">
            <input type="text" class="form-control" id="keterangan_txt" placeholder="Izin bekerja" required>
            <label for="formGroupExampleInput2MD">Keterangan</label>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="submit" id="add_keterangan_btn" class="btn btn-primary">ADD</button>
          </div>
        </form>
        <!-- Material form group -->
      </div>
    </div>
  </div>
</div>
</div>
</main>
<br>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.min.js"></script>
<script src="/scripts/mdb.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/1.10.8/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" language="javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/dataTables.buttons.min.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.32/pdfmake.min.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.32/vfs_fonts.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.html5.min.js">
</script>
<script src="/scripts/attendances/date-input-validator.js"></script>
<script src="/scripts/attendances/loading-spinner.js"></script>
<script src="/scripts/attendances/clock-pairing.js"></script>
<script src="/scripts/payroll/payroll-dosen-calculator.js"></script>

<script type="text/javascript">
  $(".button-collapse").sideNav();
  $('.mdb-select').material_select();
  $('#data_table').DataTable({
    dom: 'Bfrtip',
    lengthMenu: [
    [10, 25, 50, -1],
    [10, 25, 50, "All"]
    ],
    buttons: [
    'pageLength',
    'copyHtml5',
    'excelHtml5',
    {
      extend: 'pdf',
      text: 'Pdf',
      orientation: 'landscape'
    }
    ]
  });

  //initialize form
  let monthTo = (moment().month()+1)<10 ? "0"+(moment().month()+1) : (moment().month()+1);
  let monthFrom = moment().month()<10?"0"+moment().month():moment().month();
  let dateTo = moment().year()+"-"+monthTo+"-15";
  let dateFrom = moment().year()+"-"+monthFrom+"-16";
  $('#from_txt').val(dateFrom);
  $('#to_txt').val(dateTo);

  let dosenTidakTetapMaxTime = '<%=configuration.dosenTidakTetapMaxTime%>';
  let dateInputValidator = DateInputValidator.bind({
    fromTxt: 'from_txt',
    toTxt: 'to_txt'
  });
  let loadingSpinner = LoadingSpinner.bind({
    spinner: 'spinner',
    hideableNodes: ['data_table_wrapper'],
    disableNodes: ['generate_button']
  });

  function applyPrecision(num, precision) {
    return Math.round((num + 0.00001) * (10**precision)) / (10**precision);
  }
  function formatToRupiah(value){
    let formatted = value.toLocaleString('en-US', {minimumFractionDigits: 2});
    return 'IDR ' + formatted.replace(/,/g, '#').replace(/\./g, ',').replace(/#/g, '.');
  }

  function renderTable(rows) {
    $.fn.dataTable.ext.errMode = 'none';
    let result = [];
    for (let row of rows) {
      let [nominals, keterangans] = formatNominalsKeterangans(row.keteranganList);
      result.push([
        row.kategori_pegawai,
        row.nik,

        //nama lengkap sesuai KTP
        row.nama_depan,
        row.nama_tengah,
        row.nama_belakang,

        //posisi kerja
        row.department,
        row.spesialisasi,
        row.cost_center,

        //data jadwal dosen
        '-',
        '-',
        '-',
        '-',

        //data payroll
        row.perhitungan_gaji,
        row.jenis_mata_uang,
        row.jumlah_gaji_saat_ini,
        row.penerimaan_gaji,

        //data perhitungan gaji dan ayroll
        applyPrecision(row.total_durasi_kerja_ms/(60*60*1000.0), 2) + ' jam',
        formatToRupiah(applyPrecision(row.gaji_pokok, 2)),
        nominals || '-',
        keterangans || '-',
        formatToRupiah(applyPrecision(row.total_gaji, 2))
        ]);
    }
    $('#data_table').DataTable({
      destroy: true,
      dom: 'Bfrtip',
      lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],
      buttons: [
      'pageLength',
      'copyHtml5',
      'excelHtml5',
      {
        extend: 'pdf',
        text: 'Pdf',
        orientation: 'landscape'
      }
      ],
      data: result,
      columns: [
      {title: 'Kategori Pegawai'},  
      {title: 'NIK'},

        // nama lengkap sesuai KTP
        {title: 'Nama depan'},
        {title: 'Nama tengah'},
        {title: 'Nama belakang'},

        // posisi kerja
        {title: 'Departemen'},
        {title: 'Spesialisasi'},
        {title: 'Cost Center'},

        // data jadwal dosen
        {title: 'Nama Mata Kuliah'},
        {title: 'Jumlah Sesi Tutorial'},
        {title: 'Jumlah Sesi Lecture'},
        {title: 'Total Sesi'},

        // data payroll
        {title: 'Perhitungan gaji'},
        {title: 'Jenis mata uang'},
        {title: 'Jumlah gaji saat ini'},
        {title: 'Penerimaan gaji'},

        // Perhitungan Jam Kerja dan Payroll
        {title: 'Total durasi kerja'},
        {title: 'Gaji pokok/Total gaji per jam'},
        {title: 'Penambahan/Pengurangan'},
        {title: 'Keterangan Penambahan/Pengurangan'},
        {title: 'Total gaji yang diterima'}
        ]
      });
  }

  $('#generate_button').on('click', () => {
    if (!dateInputValidator.isValid()) return;
    let fromString = $('#from_txt').val();
    let toString = $('#to_txt').val();
    loadingSpinner.start();
    $.getJSON("/api/attendances", {
      from: fromString,
      to: toString
    }).then(attendances => {
      let payrollResult = PayrollDosenCalculator.process(attendances, {
        dosenTidakTetapMaxTime: dosenTidakTetapMaxTime
      });
      getKeteranganList({
        startDate: new Date(fromString),
        endDate: new Date(toString)
      }, function(keteranganList) {
        let nikToKeteranganList = {};
        //kelompokkan keterangan berdasarkan nik
        keteranganList.forEach(ket => {
          if (!nikToKeteranganList[ket.nik]) nikToKeteranganList[ket.nik] = [];
          nikToKeteranganList[ket.nik].push(ket);
        });
        //tempelkan keterangan ke payrollResult
        payrollResult.forEach(e => {
          e.keteranganList = nikToKeteranganList[e.nik] || [];
        });
        renderTable(payrollResult);
        bindFormKeterangan();
        loadingSpinner.stop();
      });
    }).catch(err => {
      loadingSpinner.init();
    });
  });

  function bindFormKeterangan() {
    let dataTable = $('#data_table').DataTable();
    $('#data_table tbody').on('click', 'td', function(){
      let cell = dataTable.cell(this);
      if (!cell.length || cell.index().column != 19) return;
      let row = cell.index().row;

      let nik = dataTable.cell(row, 1).data();
      let nama = '';
      [2, 3, 4].forEach(e => 
        {let data = dataTable.cell(row, e).data(); if (data) nama += data+' ';});
      $('#modal_keterangan_title')
        .html(`${nama} <span style="float:right">${nik}</span>`)
      $(this).attr('data-toggle','modal');
      $(this).attr('data-target','#exampleModal');

      $('#form_keterangan').unbind();
      $('#form_keterangan').on('submit', function(err) {
        err.preventDefault();
        let multiplier = $('#option_keterangan :selected').text()==='Penambahan' ? 1 : -1;
        let newKeterangan = {
          nik: dataTable.cell(row, 1).data(),
          startDate: new Date($('#from_txt').val()),
          endDate: new Date($('#to_txt').val()),
          nominal: multiplier * Number($('#nominal_txt').val()),
          keterangan: $('#keterangan_txt').val()
        };

        //insert to database
        $.ajax({
          type: 'POST',
          url : '/api/keteranganpayroll',
          headers: newKeterangan,
          success : function(data) {
            //update table
            getKeteranganList({
              nik: newKeterangan.nik,
              startDate: newKeterangan.startDate,
              endDate: newKeterangan.endDate
            }, function(keteranganList) {
              let [nominals, keterangans] = formatNominalsKeterangans(keteranganList);
              dataTable.cell(row, 18).data(nominals);
              dataTable.cell(row, 19).data(keterangans);
              toastr.info('New Keterangan Inserted');
              $('#nominal_txt').val('');
              $('#keterangan_txt').val('');
            });
          },
          error : function() {
            toastr.info('Error occured!');
            console.log("Ajax Error occured!");
          }
        });
      });
    })
  }

  function getKeteranganList(options, callback) {
    $.getJSON('/api/keteranganpayroll', {
      nik: options.nik,
      startDate: options.startDate,
      endDate: options.endDate
    }).then(keteranganList => {
      callback(keteranganList);
    }).catch(err => {
      console.log(err);
    });
  }

  function formatNominalsKeterangans(keteranganList) {
    let nominals = null, keterangans = null;
    if (keteranganList.length) {
      nominals = '', keterangans = '';
      keteranganList.forEach(ket => {
        nominals += ((ket.nominal>0?'(+) ':'(-) ') + Math.abs(ket.nominal)) + '<br>';
        keterangans += ket.keterangan + '<br> ';
      });
    }
    return [nominals || '-', keterangans || '-'];
  }

</script>
</body>

</html>