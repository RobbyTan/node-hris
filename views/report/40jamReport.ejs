<% include ../partials/attendanceHeader%>
<div class="container">
	<h3>Punctuality Report</h3>
	
	<table class="table">
		<label class="pl-3">From:</label>
		<div class="md-form col-xl-3">
			<input name="from" type="date" id="from_txt" required>
		</div>
		<label class="pl-3">To:</label>
		<div class="md-form col-xl-3">
			<input name="to" type="date" id="to_txt" required>
		</div>
		<button id="generate_button" type="button" class="btn btn-primary">Generate</button>
		<br>

		<div class="preloader-wrapper big active" id="spinner" style="top: 50%; left: 50%;">
			<div class="spinner-layer spinner-blue-only">
				<div class="circle-clipper left"><div class="circle"></div></div>
				<div class="gap-patch"><div class="circle"></div></div>
				<div class="circle-clipper right"><div class="circle"></div></div>
			</div>
		</div>

		<table id="data_table" class="table stripe" cellspacing="0" width="100%">
			<thead>
				<tr>
					<td>NIK</td>
					<td>Nama</td>
					<td>Departemen</td>
					<td>Atasan Langsung</td>
					<td>Jam Masuk</td>
					<td>Distribusi Jam Kerja</td>
					<td>Total Jam Kerja</td>
				</tr>
			</thead>
			<tbody>
			</tbody>
		</table>
	</table>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.min.js"></script>
<script src="/scripts/mdb.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/1.10.8/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" language="javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/dataTables.buttons.min.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.32/pdfmake.min.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.32/vfs_fonts.js">
</script>
<script type="text/javascript" language="javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.html5.min.js">
</script>
<script src="/scripts/attendances/date-input-validator.js"></script>
<script src="/scripts/attendances/loading-spinner.js"></script>
<script src="/scripts/attendances/clock-pairing.js"></script>
<script src="/scripts/attendances/clock-list-dialog.js"></script>
<script type="text/javascript">
	$.fn.dataTable.ext.errMode = 'none';
  $(".button-collapse").sideNav();
  $('.mdb-select').material_select();
  $('#data_table').DataTable({
    dom: 'Bfrtip',
    lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
    buttons: [
      'pageLength',
      'copyHtml5',
      'excelHtml5',
      {
        extend: 'pdf',
        text: 'Pdf',
        orientation: 'landscape'
      }
    ]
	});
	
	let dosenTidakTetapMaxTime = '<%=configuration.dosenTidakTetapMaxTime%>';
  let dateInputValidator = DateInputValidator.bind({
    fromTxt: 'from_txt',
    toTxt: 'to_txt'
  });
  let loadingSpinner = LoadingSpinner.bind({
    spinner: 'spinner',
    hideableNodes: ['data_table_wrapper'],
    disableNodes: ['generate_button']
  });
  
  function toMiliSeconds(time) {
    let timeParts = time.split(":");
    let h = timeParts[0] ? +timeParts[0] * 60 * 60 * 1000 : 0;
    let m = timeParts[1] ? +timeParts[1] * 60 * 1000 : 0;
    let s = timeParts[2] ? +timeParts[2] * 1000 : 0;
    return h + m + s;
	}
	function toHHMMSS(milliseconds) {
		function pad2(i) { if (i <= 9) return '0'+i; return i; }
    let h = Math.floor(milliseconds/(60*60*1000));
    milliseconds %= (60*60*1000);
    let m = Math.floor(milliseconds/(60*1000));
    milliseconds %= (60*1000);
    let s = Math.floor(milliseconds/(1000));
    return `${pad2(h)}:${pad2(m)}:${pad2(s)}`;
  }

	function processPunctuality(attendances) {
		attendances.forEach(att => {
			att.absensi.forEach(abs => {
				abs.date = moment(abs.date);
			});
		});

		let attendanceDict = {};
		for (let att of attendances) 
			(attendanceDict[att.nik] = attendanceDict[att.nik] || []).push(att);

		let employeeDict = {};
		for (let nik in attendanceDict) {
			employeeDict[nik] = {
				totalJamKerja: '', listJamKerja: '',
				...attendanceDict[nik][0]
			};
			attendanceDict[nik].sort((a, b) => a.absensi[0].date.valueOf - b.absensi[0].date.valueOf);

			// telat5, telat15, tidakClockOut
			for (let att of attendanceDict[nik]) {
				let clockPairingResult = ClockPairing.process(att.absensi, {
					dosenTidakTetapMaxTime: dosenTidakTetapMaxTime,
					department: att.department,
					jamMasuk: att.jam_masuk
				});
				att.clockPairingResult = clockPairingResult;
			}

			// jam kerja per minggu
			let curTotalJamKerjaMs = 0, totalJamKerjaMs = 0, listJamKerjaMs = [],
					startDate = attendanceDict[nik][0].absensi[0].date,
					endDate = moment(attendanceDict[nik].slice(-1)[0].absensi[0].date).add(1, 'days'),
					attIndex = 0;
			while (startDate.format('DD-MM-YYYY') != endDate.format('DD-MM-YYYY')) {
				if (startDate.format('DD-MM-YYYY') == attendanceDict[nik][attIndex].absensi[0].date.format('DD-MM-YYYY')) {
					curTotalJamKerjaMs += toMiliSeconds(attendanceDict[nik][attIndex].clockPairingResult.totalWorkingTime);
					attIndex += 1;
				}
				if (startDate.format('dddd') == 'Sunday') {
					totalJamKerjaMs += curTotalJamKerjaMs;
					listJamKerjaMs.push(curTotalJamKerjaMs);
					curTotalJamKerjaMs = 0;
				}
				startDate.add(1, 'days');
			}
			startDate.subtract(1, 'days');
			if (startDate.format('dddd') != 'Sunday') {
				totalJamKerjaMs += curTotalJamKerjaMs;
				listJamKerjaMs.push(curTotalJamKerjaMs);
			}

			// formatting jam kerja per minggu
			employeeDict[nik].totalJamKerja = toHHMMSS(totalJamKerjaMs);
			for (let jamKerjaMs of listJamKerjaMs) {
				employeeDict[nik].listJamKerja += toHHMMSS(jamKerjaMs) + '<br>';
			}
		}
		return employeeDict;
	}

  function renderTable(employeeDict) {
		let result = [];
    for (let nik in employeeDict) {
			let emp = employeeDict[nik];
			let sudahBanyakPelanggaran = true;
			if (!sudahBanyakPelanggaran) continue;
      result.push([
        emp.nik,
        emp.first_Name + ' ' + (emp.last_Name ? emp.last_Name : ''),
        emp.department,
        (emp.atasan_langsung ? emp.atasan_langsung : ''),
				(emp.jam_masuk ? (emp.jam_masuk+':00'): ''),
				emp.listJamKerja,
				emp.totalJamKerja
      ]);
    }

    $('#data_table').DataTable({
      destroy: true,
      dom: 'Bfrtip',
      lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],
      buttons: [
        'pageLength',
        'copyHtml5',
        'excelHtml5',
        {
          extend: 'pdf',
          text: 'Pdf',
          orientation: 'landscape'
        }
      ],
      data: result,
      columns: [
        {title: "NIK"},
        {title: "Nama"},
        {title: "Departemen"},
        {title: "Atasan Langsung"},
				{title: "Jam Masuk"},
				{title: "Distribusi Jam Kerja"},
        {title: "Total Jam Kerja"}
      ]
    })
  }

  $('#generate_button').on('click', async function() {
    if (!dateInputValidator.isValid()) return;
    let fromString = $('#from_txt').val();
    let toString = $('#to_txt').val();
    loadingSpinner.start();
    try {
			let attendances = await $.getJSON("/api/attendances", {from:fromString, to:toString});
			let employeeDict = processPunctuality(attendances);
      renderTable(employeeDict);
      loadingSpinner.stop();
    } catch (err) {
      toastr.error(err);
      loadingSpinner.init();
    }
  });
</script>
</body>
</html>
